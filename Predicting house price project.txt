#the aim of this analysis to test the difference type of regression and its accuracy to predict the price of houses 

#firstly lets load the libraries we are going to use 



```r
library(tidyverse)
```

```
## Warning: package 'tidyverse' was built under R version 3.5.3
```

```
## -- Attaching packages -------------------------------------------- tidyverse 1.2.1 --
```

```
## v ggplot2 3.1.1       v purrr   0.3.2  
## v tibble  2.1.1       v dplyr   0.8.0.1
## v tidyr   0.8.3       v stringr 1.4.0  
## v readr   1.3.1       v forcats 0.4.0
```

```
## Warning: package 'ggplot2' was built under R version 3.5.3
```

```
## Warning: package 'tibble' was built under R version 3.5.3
```

```
## Warning: package 'tidyr' was built under R version 3.5.3
```

```
## Warning: package 'readr' was built under R version 3.5.3
```

```
## Warning: package 'purrr' was built under R version 3.5.3
```

```
## Warning: package 'dplyr' was built under R version 3.5.3
```

```
## Warning: package 'stringr' was built under R version 3.5.3
```

```
## Warning: package 'forcats' was built under R version 3.5.3
```

```
## -- Conflicts ----------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
```

```r
library(caret)
```

```
## Warning: package 'caret' was built under R version 3.5.3
```

```
## Loading required package: lattice
```

```
## 
## Attaching package: 'caret'
```

```
## The following object is masked from 'package:purrr':
## 
##     lift
```

```r
library(DMwR)
```

```
## Warning: package 'DMwR' was built under R version 3.5.3
```

```
## Loading required package: grid
```

```r
library(mice)
```

```
## Warning: package 'mice' was built under R version 3.5.3
```

```
## 
## Attaching package: 'mice'
```

```
## The following object is masked from 'package:tidyr':
## 
##     complete
```

```
## The following objects are masked from 'package:base':
## 
##     cbind, rbind
```

```r
library(car)
```

```
## Warning: package 'car' was built under R version 3.5.3
```

```
## Loading required package: carData
```

```
## Warning: package 'carData' was built under R version 3.5.2
```

```
## 
## Attaching package: 'car'
```

```
## The following object is masked from 'package:dplyr':
## 
##     recode
```

```
## The following object is masked from 'package:purrr':
## 
##     some
```

```r
library(lm.beta)
```

```
## Warning: package 'lm.beta' was built under R version 3.5.2
```

#Next lets import the data 


```r
houses<-read_csv(file = "./data sets/kc_house_data.csv",col_types = "cTninnnifffinnddf??nn")
```

```
## Warning: 2079 parsing failures.
## row    col               expected actual                            file
##  13 floors no trailing characters     .5 './data sets/kc_house_data.csv'
##  15 floors no trailing characters     .5 './data sets/kc_house_data.csv'
##  18 floors no trailing characters     .5 './data sets/kc_house_data.csv'
##  26 floors no trailing characters     .5 './data sets/kc_house_data.csv'
##  28 floors no trailing characters     .5 './data sets/kc_house_data.csv'
## ... ...... ...................... ...... ...............................
## See problems(...) for more details.
```

```r
head(houses)
```

```
## # A tibble: 6 x 21
##   id    date                 price bedrooms bathrooms sqft_living sqft_lot
##   <chr> <dttm>               <dbl>    <int>     <dbl>       <dbl>    <dbl>
## 1 7129~ 2014-10-13 00:00:00 2.22e5        3      1           1180     5650
## 2 6414~ 2014-12-09 00:00:00 5.38e5        3      2.25        2570     7242
## 3 5631~ 2015-02-25 00:00:00 1.80e5        2      1            770    10000
## 4 2487~ 2014-12-09 00:00:00 6.04e5        4      3           1960     5000
## 5 1954~ 2015-02-18 00:00:00 5.10e5        3      2           1680     8080
## 6 7237~ 2014-05-12 00:00:00 1.22e6        4      4.5         5420   101930
## # ... with 14 more variables: floors <int>, waterfront <fct>, view <fct>,
## #   condition <fct>, grade <int>, sqft_above <dbl>, sqft_basement <dbl>,
## #   yr_built <dbl>, yr_renovated <dbl>, zipcode <fct>, lat <dbl>,
## #   long <dbl>, sqft_living15 <dbl>, sqft_lot15 <dbl>
```

#checking the structure of the data 


```r
str(houses)
```

```
## Classes 'spec_tbl_df', 'tbl_df', 'tbl' and 'data.frame':	21613 obs. of  21 variables:
##  $ id           : chr  "7129300520" "6414100192" "5631500400" "2487200875" ...
##  $ date         : POSIXct, format: "2014-10-13" "2014-12-09" ...
##  $ price        : num  221900 538000 180000 604000 510000 ...
##  $ bedrooms     : int  3 3 2 4 3 4 3 3 3 3 ...
##  $ bathrooms    : num  1 2.25 1 3 2 4.5 2.25 1.5 1 2.5 ...
##  $ sqft_living  : num  1180 2570 770 1960 1680 ...
##  $ sqft_lot     : num  5650 7242 10000 5000 8080 ...
##  $ floors       : int  1 2 1 1 1 1 2 1 1 2 ...
##  $ waterfront   : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
##  $ view         : Factor w/ 5 levels "0","3","4","2",..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ condition    : Factor w/ 5 levels "3","5","4","1",..: 1 1 1 2 1 1 1 1 1 1 ...
##  $ grade        : int  7 7 6 7 8 11 7 7 7 7 ...
##  $ sqft_above   : num  1180 2170 770 1050 1680 ...
##  $ sqft_basement: num  0 400 0 910 0 1530 0 0 730 0 ...
##  $ yr_built     : num  1955 1951 1933 1965 1987 ...
##  $ yr_renovated : num  0 1991 0 0 0 ...
##  $ zipcode      : Factor w/ 70 levels "98178","98125",..: 1 2 3 4 5 6 7 8 9 10 ...
##  $ lat          : num  47.5 47.7 47.7 47.5 47.6 ...
##  $ long         : num  -122 -122 -122 -122 -122 ...
##  $ sqft_living15: num  1340 1690 2720 1360 1800 ...
##  $ sqft_lot15   : num  5650 7639 8062 5000 7503 ...
##  - attr(*, "problems")=Classes 'tbl_df', 'tbl' and 'data.frame':	2079 obs. of  5 variables:
##   ..$ row     : int  13 15 18 26 28 33 34 36 55 66 ...
##   ..$ col     : chr  "floors" "floors" "floors" "floors" ...
##   ..$ expected: chr  "no trailing characters" "no trailing characters" "no trailing characters" "no trailing characters" ...
##   ..$ actual  : chr  ".5" ".5" ".5" ".5" ...
##   ..$ file    : chr  "'./data sets/kc_house_data.csv'" "'./data sets/kc_house_data.csv'" "'./data sets/kc_house_data.csv'" "'./data sets/kc_house_data.csv'" ...
##  - attr(*, "spec")=
##   .. cols(
##   ..   id = col_character(),
##   ..   date = col_datetime(format = ""),
##   ..   price = col_number(),
##   ..   bedrooms = col_integer(),
##   ..   bathrooms = col_number(),
##   ..   sqft_living = col_number(),
##   ..   sqft_lot = col_number(),
##   ..   floors = col_integer(),
##   ..   waterfront = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   view = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   condition = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   grade = col_integer(),
##   ..   sqft_above = col_number(),
##   ..   sqft_basement = col_number(),
##   ..   yr_built = col_double(),
##   ..   yr_renovated = col_double(),
##   ..   zipcode = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   lat = col_double(),
##   ..   long = col_double(),
##   ..   sqft_living15 = col_number(),
##   ..   sqft_lot15 = col_number()
##   .. )
```

#removing id lat long date


```r
houses<-houses%>%select(-c(id,date,lat,long))
```

#need to check the condition if it need to be ordered 


```r
unique(houses$condition)
```

```
## [1] 3 5 4 1 2
## Levels: 3 5 4 1 2
```

#i think that is preferable if it is ordered


```r
houses<-houses%>%mutate(condition=factor(condition,levels = c("1","2","3","4","5"),labels = c("1","2","3","4","5"),ordered = F))
```


#checking the structure again 


```r
str(houses)
```

```
## Classes 'spec_tbl_df', 'tbl_df', 'tbl' and 'data.frame':	21613 obs. of  17 variables:
##  $ price        : num  221900 538000 180000 604000 510000 ...
##  $ bedrooms     : int  3 3 2 4 3 4 3 3 3 3 ...
##  $ bathrooms    : num  1 2.25 1 3 2 4.5 2.25 1.5 1 2.5 ...
##  $ sqft_living  : num  1180 2570 770 1960 1680 ...
##  $ sqft_lot     : num  5650 7242 10000 5000 8080 ...
##  $ floors       : int  1 2 1 1 1 1 2 1 1 2 ...
##  $ waterfront   : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
##  $ view         : Factor w/ 5 levels "0","3","4","2",..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ condition    : Factor w/ 5 levels "1","2","3","4",..: 3 3 3 5 3 3 3 3 3 3 ...
##  $ grade        : int  7 7 6 7 8 11 7 7 7 7 ...
##  $ sqft_above   : num  1180 2170 770 1050 1680 ...
##  $ sqft_basement: num  0 400 0 910 0 1530 0 0 730 0 ...
##  $ yr_built     : num  1955 1951 1933 1965 1987 ...
##  $ yr_renovated : num  0 1991 0 0 0 ...
##  $ zipcode      : Factor w/ 70 levels "98178","98125",..: 1 2 3 4 5 6 7 8 9 10 ...
##  $ sqft_living15: num  1340 1690 2720 1360 1800 ...
##  $ sqft_lot15   : num  5650 7639 8062 5000 7503 ...
```

#now we want to test some assumption 

#the most important one to start with is the missing values , what about it ?


```r
summary(houses)
```

```
##      price            bedrooms        bathrooms      sqft_living   
##  Min.   :  75000   Min.   : 0.000   Min.   :0.000   Min.   :  290  
##  1st Qu.: 321950   1st Qu.: 3.000   1st Qu.:1.750   1st Qu.: 1427  
##  Median : 450000   Median : 3.000   Median :2.250   Median : 1910  
##  Mean   : 540088   Mean   : 3.371   Mean   :2.115   Mean   : 2080  
##  3rd Qu.: 645000   3rd Qu.: 4.000   3rd Qu.:2.500   3rd Qu.: 2550  
##  Max.   :7700000   Max.   :33.000   Max.   :8.000   Max.   :13540  
##                                                                    
##     sqft_lot           floors      waterfront view      condition
##  Min.   :    520   Min.   :1.000   0:21450    0:19489   1:   30  
##  1st Qu.:   5040   1st Qu.:1.000   1:  163    3:  510   2:  172  
##  Median :   7618   Median :1.000              4:  319   3:14031  
##  Mean   :  15107   Mean   :1.485              2:  963   4: 5679  
##  3rd Qu.:  10688   3rd Qu.:2.000              1:  332   5: 1701  
##  Max.   :1651359   Max.   :3.000                                 
##                    NA's   :2079                                  
##      grade          sqft_above   sqft_basement       yr_built   
##  Min.   : 1.000   Min.   : 290   Min.   :   0.0   Min.   :1900  
##  1st Qu.: 7.000   1st Qu.:1190   1st Qu.:   0.0   1st Qu.:1951  
##  Median : 7.000   Median :1560   Median :   0.0   Median :1975  
##  Mean   : 7.657   Mean   :1788   Mean   : 291.5   Mean   :1971  
##  3rd Qu.: 8.000   3rd Qu.:2210   3rd Qu.: 560.0   3rd Qu.:1997  
##  Max.   :13.000   Max.   :9410   Max.   :4820.0   Max.   :2015  
##                                                                 
##   yr_renovated       zipcode      sqft_living15    sqft_lot15    
##  Min.   :   0.0   98103  :  602   Min.   : 399   Min.   :   651  
##  1st Qu.:   0.0   98038  :  590   1st Qu.:1490   1st Qu.:  5100  
##  Median :   0.0   98115  :  583   Median :1840   Median :  7620  
##  Mean   :  84.4   98052  :  574   Mean   :1987   Mean   : 12768  
##  3rd Qu.:   0.0   98117  :  553   3rd Qu.:2360   3rd Qu.: 10083  
##  Max.   :2015.0   98042  :  548   Max.   :6210   Max.   :871200  
##                   (Other):18163
```

#we have a problem only with floor

#lets check the percent of missing 


```r
(sum(is.na(houses$floors))/nrow(houses)
)*100
```

```
## [1] 9.619211
```

#only 10% of missings , so i will impute it using KNN method 

#first i want to extract the numeric variables 


```r
num<-houses%>%select(price,bedrooms,bathrooms,sqft_living,sqft_lot,floors,sqft_above,sqft_basement,sqft_living15,sqft_lot15)%>%data.frame()

set.seed(3215)

knn<-(knnImputation(data = num))

houses<-houses%>%mutate(floors=knn$floors,
                        floors=as.integer(round(floors,0)))
```

#check again for missing 


```r
(sum(is.na(houses$floors))/nrow(houses)
)*100
```

```
## [1] 0
```

#great

#now lets run regular regression to test the assumption


```r
fit<-houses%>%with(lm(price~.,data=houses))
summary(fit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -1238330   -70204     -794    62568  4412815 
## 
## Coefficients: (1 not defined because of singularities)
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    8.840e+05  1.282e+05   6.893 5.61e-12 ***
## bedrooms      -2.721e+04  1.528e+03 -17.800  < 2e-16 ***
## bathrooms      2.492e+04  2.646e+03   9.421  < 2e-16 ***
## sqft_living    1.280e+02  3.551e+00  36.032  < 2e-16 ***
## sqft_lot       2.465e-01  3.835e-02   6.429 1.32e-10 ***
## floors        -4.723e+04  3.151e+03 -14.985  < 2e-16 ***
## waterfront1    5.632e+05  1.604e+04  35.111  < 2e-16 ***
## view3          1.534e+05  7.622e+03  20.121  < 2e-16 ***
## view4          3.376e+05  1.167e+04  28.915  < 2e-16 ***
## view2          6.832e+04  5.563e+03  12.282  < 2e-16 ***
## view1          7.679e+04  9.104e+03   8.435  < 2e-16 ***
## condition2     5.966e+04  3.185e+04   1.873 0.061087 .  
## condition3     4.257e+04  2.954e+04   1.441 0.149589    
## condition4     6.169e+04  2.954e+04   2.088 0.036818 *  
## condition5     1.038e+05  2.973e+04   3.493 0.000479 ***
## grade          5.769e+04  1.815e+03  31.780  < 2e-16 ***
## sqft_above     7.939e+01  3.615e+00  21.960  < 2e-16 ***
## sqft_basement         NA         NA      NA       NA    
## yr_built      -6.719e+02  6.604e+01 -10.174  < 2e-16 ***
## yr_renovated   1.782e+01  2.953e+00   6.034 1.62e-09 ***
## zipcode98125   1.590e+05  1.271e+04  12.510  < 2e-16 ***
## zipcode98028   7.691e+04  1.384e+04   5.556 2.80e-08 ***
## zipcode98136   2.057e+05  1.409e+04  14.603  < 2e-16 ***
## zipcode98074   1.253e+05  1.281e+04   9.777  < 2e-16 ***
## zipcode98053   1.454e+05  1.310e+04  11.106  < 2e-16 ***
## zipcode98003  -5.609e+04  1.388e+04  -4.042 5.32e-05 ***
## zipcode98198  -4.142e+04  1.383e+04  -2.994 0.002753 ** 
## zipcode98146   6.491e+04  1.371e+04   4.734 2.22e-06 ***
## zipcode98038  -1.246e+04  1.217e+04  -1.024 0.306010    
## zipcode98007   2.024e+05  1.691e+04  11.973  < 2e-16 ***
## zipcode98115   2.894e+05  1.203e+04  24.051  < 2e-16 ***
## zipcode98107   3.090e+05  1.415e+04  21.833  < 2e-16 ***
## zipcode98126   1.577e+05  1.313e+04  12.010  < 2e-16 ***
## zipcode98019   4.629e+04  1.550e+04   2.987 0.002819 ** 
## zipcode98103   3.014e+05  1.212e+04  24.870  < 2e-16 ***
## zipcode98002  -1.492e+04  1.520e+04  -0.982 0.326085    
## zipcode98133   1.271e+05  1.233e+04  10.306  < 2e-16 ***
## zipcode98040   4.698e+05  1.413e+04  33.251  < 2e-16 ***
## zipcode98092  -8.031e+04  1.332e+04  -6.027 1.70e-09 ***
## zipcode98030  -3.735e+04  1.423e+04  -2.625 0.008662 ** 
## zipcode98119   4.416e+05  1.569e+04  28.148  < 2e-16 ***
## zipcode98112   5.802e+05  1.429e+04  40.585  < 2e-16 ***
## zipcode98052   1.836e+05  1.220e+04  15.052  < 2e-16 ***
## zipcode98027   1.250e+05  1.292e+04   9.675  < 2e-16 ***
## zipcode98117   2.783e+05  1.216e+04  22.884  < 2e-16 ***
## zipcode98058  -1.521e+04  1.259e+04  -1.208 0.227072    
## zipcode98001  -4.393e+04  1.312e+04  -3.348 0.000815 ***
## zipcode98056   5.365e+04  1.284e+04   4.177 2.97e-05 ***
## zipcode98166   1.547e+04  1.418e+04   1.091 0.275089    
## zipcode98023  -7.646e+04  1.237e+04  -6.180 6.54e-10 ***
## zipcode98070  -5.269e+04  1.835e+04  -2.872 0.004081 ** 
## zipcode98148   2.842e+04  2.349e+04   1.210 0.226264    
## zipcode98105   4.290e+05  1.472e+04  29.144  < 2e-16 ***
## zipcode98042  -3.817e+04  1.226e+04  -3.113 0.001854 ** 
## zipcode98008   2.086e+05  1.385e+04  15.060  < 2e-16 ***
## zipcode98059   3.947e+04  1.265e+04   3.121 0.001807 ** 
## zipcode98122   2.988e+05  1.391e+04  21.479  < 2e-16 ***
## zipcode98144   2.411e+05  1.327e+04  18.166  < 2e-16 ***
## zipcode98004   7.323e+05  1.368e+04  53.518  < 2e-16 ***
## zipcode98005   2.558e+05  1.612e+04  15.872  < 2e-16 ***
## zipcode98034   1.581e+05  1.215e+04  13.014  < 2e-16 ***
## zipcode98075   1.189e+05  1.347e+04   8.827  < 2e-16 ***
## zipcode98116   2.441e+05  1.341e+04  18.205  < 2e-16 ***
## zipcode98010   2.321e+04  1.907e+04   1.217 0.223450    
## zipcode98118   1.303e+05  1.224e+04  10.644  < 2e-16 ***
## zipcode98199   3.501e+05  1.354e+04  25.852  < 2e-16 ***
## zipcode98032  -3.697e+04  1.750e+04  -2.113 0.034641 *  
## zipcode98045   4.949e+04  1.481e+04   3.341 0.000836 ***
## zipcode98102   4.725e+05  1.880e+04  25.137  < 2e-16 ***
## zipcode98077   7.378e+04  1.552e+04   4.755 2.00e-06 ***
## zipcode98108   8.611e+04  1.542e+04   5.585 2.36e-08 ***
## zipcode98168   3.502e+04  1.396e+04   2.510 0.012094 *  
## zipcode98177   1.702e+05  1.422e+04  11.974  < 2e-16 ***
## zipcode98065   3.901e+04  1.376e+04   2.836 0.004575 ** 
## zipcode98029   1.675e+05  1.361e+04  12.305  < 2e-16 ***
## zipcode98006   2.217e+05  1.259e+04  17.603  < 2e-16 ***
## zipcode98109   4.608e+05  1.850e+04  24.913  < 2e-16 ***
## zipcode98022  -5.254e+04  1.471e+04  -3.572 0.000356 ***
## zipcode98033   3.211e+05  1.272e+04  25.242  < 2e-16 ***
## zipcode98155   1.043e+05  1.252e+04   8.333  < 2e-16 ***
## zipcode98024   1.157e+05  2.072e+04   5.582 2.40e-08 ***
## zipcode98011   7.770e+04  1.530e+04   5.078 3.85e-07 ***
## zipcode98031  -2.853e+04  1.400e+04  -2.038 0.041569 *  
## zipcode98106   1.080e+05  1.327e+04   8.136 4.29e-16 ***
## zipcode98072   1.078e+05  1.408e+04   7.658 1.96e-14 ***
## zipcode98188  -4.008e+03  1.697e+04  -0.236 0.813315    
## zipcode98014   5.709e+04  1.787e+04   3.196 0.001398 ** 
## zipcode98055   4.477e+03  1.399e+04   0.320 0.748889    
## zipcode98039   1.271e+06  2.508e+04  50.666  < 2e-16 ***
## sqft_living15  1.114e+01  2.886e+00   3.858 0.000114 ***
## sqft_lot15    -1.319e-01  6.026e-02  -2.189 0.028594 *  
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 160300 on 21523 degrees of freedom
## Multiple R-squared:  0.8101,	Adjusted R-squared:  0.8093 
## F-statistic:  1032 on 89 and 21523 DF,  p-value: < 2.2e-16
```


#here from round 1 we can see that most of predictors are significant 

#also we see that the ares of basement has nothing to do for prediction , so i will remove it and run the analysis again


```r
houses<-houses%>%select(-sqft_basement)

fit<-houses%>%with(lm(price~.,data=houses))
summary(fit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -1238330   -70204     -794    62568  4412815 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    8.840e+05  1.282e+05   6.893 5.61e-12 ***
## bedrooms      -2.721e+04  1.528e+03 -17.800  < 2e-16 ***
## bathrooms      2.492e+04  2.646e+03   9.421  < 2e-16 ***
## sqft_living    1.280e+02  3.551e+00  36.032  < 2e-16 ***
## sqft_lot       2.465e-01  3.835e-02   6.429 1.32e-10 ***
## floors        -4.723e+04  3.151e+03 -14.985  < 2e-16 ***
## waterfront1    5.632e+05  1.604e+04  35.111  < 2e-16 ***
## view3          1.534e+05  7.622e+03  20.121  < 2e-16 ***
## view4          3.376e+05  1.167e+04  28.915  < 2e-16 ***
## view2          6.832e+04  5.563e+03  12.282  < 2e-16 ***
## view1          7.679e+04  9.104e+03   8.435  < 2e-16 ***
## condition2     5.966e+04  3.185e+04   1.873 0.061087 .  
## condition3     4.257e+04  2.954e+04   1.441 0.149589    
## condition4     6.169e+04  2.954e+04   2.088 0.036818 *  
## condition5     1.038e+05  2.973e+04   3.493 0.000479 ***
## grade          5.769e+04  1.815e+03  31.780  < 2e-16 ***
## sqft_above     7.939e+01  3.615e+00  21.960  < 2e-16 ***
## yr_built      -6.719e+02  6.604e+01 -10.174  < 2e-16 ***
## yr_renovated   1.782e+01  2.953e+00   6.034 1.62e-09 ***
## zipcode98125   1.590e+05  1.271e+04  12.510  < 2e-16 ***
## zipcode98028   7.691e+04  1.384e+04   5.556 2.80e-08 ***
## zipcode98136   2.057e+05  1.409e+04  14.603  < 2e-16 ***
## zipcode98074   1.253e+05  1.281e+04   9.777  < 2e-16 ***
## zipcode98053   1.454e+05  1.310e+04  11.106  < 2e-16 ***
## zipcode98003  -5.609e+04  1.388e+04  -4.042 5.32e-05 ***
## zipcode98198  -4.142e+04  1.383e+04  -2.994 0.002753 ** 
## zipcode98146   6.491e+04  1.371e+04   4.734 2.22e-06 ***
## zipcode98038  -1.246e+04  1.217e+04  -1.024 0.306010    
## zipcode98007   2.024e+05  1.691e+04  11.973  < 2e-16 ***
## zipcode98115   2.894e+05  1.203e+04  24.051  < 2e-16 ***
## zipcode98107   3.090e+05  1.415e+04  21.833  < 2e-16 ***
## zipcode98126   1.577e+05  1.313e+04  12.010  < 2e-16 ***
## zipcode98019   4.629e+04  1.550e+04   2.987 0.002819 ** 
## zipcode98103   3.014e+05  1.212e+04  24.870  < 2e-16 ***
## zipcode98002  -1.492e+04  1.520e+04  -0.982 0.326085    
## zipcode98133   1.271e+05  1.233e+04  10.306  < 2e-16 ***
## zipcode98040   4.698e+05  1.413e+04  33.251  < 2e-16 ***
## zipcode98092  -8.031e+04  1.332e+04  -6.027 1.70e-09 ***
## zipcode98030  -3.735e+04  1.423e+04  -2.625 0.008662 ** 
## zipcode98119   4.416e+05  1.569e+04  28.148  < 2e-16 ***
## zipcode98112   5.802e+05  1.429e+04  40.585  < 2e-16 ***
## zipcode98052   1.836e+05  1.220e+04  15.052  < 2e-16 ***
## zipcode98027   1.250e+05  1.292e+04   9.675  < 2e-16 ***
## zipcode98117   2.783e+05  1.216e+04  22.884  < 2e-16 ***
## zipcode98058  -1.521e+04  1.259e+04  -1.208 0.227072    
## zipcode98001  -4.393e+04  1.312e+04  -3.348 0.000815 ***
## zipcode98056   5.365e+04  1.284e+04   4.177 2.97e-05 ***
## zipcode98166   1.547e+04  1.418e+04   1.091 0.275089    
## zipcode98023  -7.646e+04  1.237e+04  -6.180 6.54e-10 ***
## zipcode98070  -5.269e+04  1.835e+04  -2.872 0.004081 ** 
## zipcode98148   2.842e+04  2.349e+04   1.210 0.226264    
## zipcode98105   4.290e+05  1.472e+04  29.144  < 2e-16 ***
## zipcode98042  -3.817e+04  1.226e+04  -3.113 0.001854 ** 
## zipcode98008   2.086e+05  1.385e+04  15.060  < 2e-16 ***
## zipcode98059   3.947e+04  1.265e+04   3.121 0.001807 ** 
## zipcode98122   2.988e+05  1.391e+04  21.479  < 2e-16 ***
## zipcode98144   2.411e+05  1.327e+04  18.166  < 2e-16 ***
## zipcode98004   7.323e+05  1.368e+04  53.518  < 2e-16 ***
## zipcode98005   2.558e+05  1.612e+04  15.872  < 2e-16 ***
## zipcode98034   1.581e+05  1.215e+04  13.014  < 2e-16 ***
## zipcode98075   1.189e+05  1.347e+04   8.827  < 2e-16 ***
## zipcode98116   2.441e+05  1.341e+04  18.205  < 2e-16 ***
## zipcode98010   2.321e+04  1.907e+04   1.217 0.223450    
## zipcode98118   1.303e+05  1.224e+04  10.644  < 2e-16 ***
## zipcode98199   3.501e+05  1.354e+04  25.852  < 2e-16 ***
## zipcode98032  -3.697e+04  1.750e+04  -2.113 0.034641 *  
## zipcode98045   4.949e+04  1.481e+04   3.341 0.000836 ***
## zipcode98102   4.725e+05  1.880e+04  25.137  < 2e-16 ***
## zipcode98077   7.378e+04  1.552e+04   4.755 2.00e-06 ***
## zipcode98108   8.611e+04  1.542e+04   5.585 2.36e-08 ***
## zipcode98168   3.502e+04  1.396e+04   2.510 0.012094 *  
## zipcode98177   1.702e+05  1.422e+04  11.974  < 2e-16 ***
## zipcode98065   3.901e+04  1.376e+04   2.836 0.004575 ** 
## zipcode98029   1.675e+05  1.361e+04  12.305  < 2e-16 ***
## zipcode98006   2.217e+05  1.259e+04  17.603  < 2e-16 ***
## zipcode98109   4.608e+05  1.850e+04  24.913  < 2e-16 ***
## zipcode98022  -5.254e+04  1.471e+04  -3.572 0.000356 ***
## zipcode98033   3.211e+05  1.272e+04  25.242  < 2e-16 ***
## zipcode98155   1.043e+05  1.252e+04   8.333  < 2e-16 ***
## zipcode98024   1.157e+05  2.072e+04   5.582 2.40e-08 ***
## zipcode98011   7.770e+04  1.530e+04   5.078 3.85e-07 ***
## zipcode98031  -2.853e+04  1.400e+04  -2.038 0.041569 *  
## zipcode98106   1.080e+05  1.327e+04   8.136 4.29e-16 ***
## zipcode98072   1.078e+05  1.408e+04   7.658 1.96e-14 ***
## zipcode98188  -4.008e+03  1.697e+04  -0.236 0.813315    
## zipcode98014   5.709e+04  1.787e+04   3.196 0.001398 ** 
## zipcode98055   4.477e+03  1.399e+04   0.320 0.748889    
## zipcode98039   1.271e+06  2.508e+04  50.666  < 2e-16 ***
## sqft_living15  1.114e+01  2.886e+00   3.858 0.000114 ***
## sqft_lot15    -1.319e-01  6.026e-02  -2.189 0.028594 *  
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 160300 on 21523 degrees of freedom
## Multiple R-squared:  0.8101,	Adjusted R-squared:  0.8093 
## F-statistic:  1032 on 89 and 21523 DF,  p-value: < 2.2e-16
```

#another thing to take care with is that zibcode has alot of levels and we need to round it 

#according to residual i will try to round it to small numbers of area 


```r
grouping<-houses%>%mutate(resid=resid(fit))%>%
        group_by(zipcode)%>%summarize(medresid=median(resid),
                                      cnt=n())%>%arrange(medresid)%>%
        mutate(cumcnt=cumsum(cnt),
               group=ntile(cumcnt,5))

houses<-houses%>%left_join(grouping[,c("zipcode","group")])%>%mutate(group=factor(group))
```

```
## Joining, by = "zipcode"
```

#now remove the zip from the data and run fit again 


```r
houses<-houses%>%select(-zipcode)

fit<-houses%>%with(lm(price~.,data=houses))
summary(fit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -1440288   -96543    -2856    82091  4347992 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    3.661e+06  1.278e+05  28.646  < 2e-16 ***
## bedrooms      -3.548e+04  1.767e+03 -20.082  < 2e-16 ***
## bathrooms      3.403e+04  3.078e+03  11.054  < 2e-16 ***
## sqft_living    1.465e+02  4.086e+00  35.844  < 2e-16 ***
## sqft_lot       1.430e-01  4.467e-02   3.202 0.001366 ** 
## floors        -1.701e+04  3.370e+03  -5.049 4.48e-07 ***
## waterfront1    5.411e+05  1.841e+04  29.389  < 2e-16 ***
## view3          1.246e+05  8.785e+03  14.183  < 2e-16 ***
## view4          3.293e+05  1.348e+04  24.430  < 2e-16 ***
## view2          5.948e+04  6.403e+03   9.289  < 2e-16 ***
## view1          1.079e+05  1.053e+04  10.244  < 2e-16 ***
## condition2     4.750e+04  3.725e+04   1.275 0.202299    
## condition3     3.597e+04  3.454e+04   1.042 0.297621    
## condition4     4.284e+04  3.454e+04   1.240 0.214847    
## condition5     7.650e+04  3.475e+04   2.202 0.027698 *  
## grade          7.965e+04  2.024e+03  39.350  < 2e-16 ***
## sqft_above     4.903e+01  4.006e+00  12.237  < 2e-16 ***
## yr_built      -1.972e+03  6.581e+01 -29.960  < 2e-16 ***
## yr_renovated   1.233e+01  3.419e+00   3.605 0.000312 ***
## sqft_living15  4.490e+00  3.145e+00   1.427 0.153476    
## sqft_lot15    -2.743e-01  6.828e-02  -4.017 5.92e-05 ***
## group2        -1.894e+05  4.249e+03 -44.590  < 2e-16 ***
## group3        -2.780e+05  4.565e+03 -60.900  < 2e-16 ***
## group4        -2.751e+05  4.493e+03 -61.219  < 2e-16 ***
## group5        -3.790e+05  4.818e+03 -78.668  < 2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 187900 on 21588 degrees of freedom
## Multiple R-squared:  0.7383,	Adjusted R-squared:  0.738 
## F-statistic:  2537 on 24 and 21588 DF,  p-value: < 2.2e-16
```

#coefficients here are beutifull

#now what about outlier!!


```r
num2<-houses%>%select(price,bedrooms,bathrooms,sqft_living,sqft_lot,floors,sqft_above,sqft_living15,sqft_lot15)

mah<-mahalanobis(x = num2,center = colMeans(num2),cov = cov(num2))

cutmahup<-qchisq(.99,ncol(num2))
cutmahdown<-qchisq(.01,ncol(num2))

outidxup<-mah>cutmahup%>%as.numeric()
outidxdown<-mah<cutmahdown%>%as.numeric()

table(outidxup)
```

```
## outidxup
## FALSE  TRUE 
## 20491  1122
```

```r
table(outidxdown)
```

```
## outidxdown
## FALSE  TRUE 
## 20452  1161
```

#next testing for infeluantial points 


```r
inf<-hatvalues(fit)
cutinf<-(2*(ncol(houses)-1)+1)/nrow(houses)

table(inf>cutinf)
```

```
## 
## FALSE  TRUE 
## 17840  3773
```

#this data is horrible !!



```r
infidx<-inf>cutinf%>%as.numeric()
```

#testing cooks distance 


```r
cook<-cooks.distance(fit)

cutcook<-4/(nrow(houses)-(ncol(houses)-1)-1)

table(cook>cutcook)
```

```
## 
## FALSE  TRUE 
## 20445  1168
```

```r
cookidx<-cook>cutcook%>%as.numeric()
```

#testing for variance inflation 

```r
vif<-vif(fit)
vif
```

```
##                   GVIF Df GVIF^(1/(2*Df))
## bedrooms      1.652006  1        1.285304
## bathrooms     3.439371  1        1.854554
## sqft_living   8.619531  1        2.935904
## sqft_lot      2.095221  1        1.447488
## floors        2.140174  1        1.462933
## waterfront    1.552665  1        1.246060
## view          1.852967  4        1.080148
## condition     1.325228  4        1.035825
## grade         3.464651  1        1.861357
## sqft_above    6.735939  1        2.595369
## yr_built      2.286691  1        1.512181
## yr_renovated  1.154266  1        1.074368
## sqft_living15 2.843973  1        1.686408
## sqft_lot15    2.127071  1        1.458448
## group         1.318664  4        1.035182
```

#good news , we don't have here any vif value over 10 and this indicate abscence of multicolinearity 

#testing auto correlation 


```r
set.seed(5643)
auto<-durbinWatsonTest(fit,simulate = T,reps = 1000,method = "resample")
auto
```

```
##  lag Autocorrelation D-W Statistic p-value
##    1      0.01565743      1.968669   0.018
##  Alternative hypothesis: rho != 0
```

#great , pvalue indicate that there is no autocorrelation

#Now lets see the most bad records inour data 


```r
allbad<-outidxup+outidxdown+infidx+cookidx

table(allbad)
```

```
## allbad
##     0     1     2     3 
## 16521  3441  1170   481
```

#i will delete all records which break 2 rules 


```r
bad<-allbad>=2

table(bad)
```

```
## bad
## FALSE  TRUE 
## 19962  1651
```

```r
houses<-houses%>%anti_join(houses[bad,])
```

```
## Joining, by = c("price", "bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "waterfront", "view", "condition", "grade", "sqft_above", "yr_built", "yr_renovated", "sqft_living15", "sqft_lot15", "group")
```

#running the fit again 


```r
fit<-houses%>%with(lm(price~.,data=houses))
summary(fit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -519034  -78707   -3919   69046  932627 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    3.266e+06  1.011e+05  32.294  < 2e-16 ***
## bedrooms      -1.988e+04  1.334e+03 -14.900  < 2e-16 ***
## bathrooms      2.454e+04  2.235e+03  10.976  < 2e-16 ***
## sqft_living    1.056e+02  3.129e+00  33.755  < 2e-16 ***
## sqft_lot       5.518e-01  1.239e-01   4.455 8.45e-06 ***
## floors         1.160e+04  2.381e+03   4.872 1.11e-06 ***
## waterfront1    5.294e+05  3.532e+04  14.988  < 2e-16 ***
## view3          1.205e+05  7.203e+03  16.734  < 2e-16 ***
## view4          3.510e+05  1.574e+04  22.307  < 2e-16 ***
## view2          6.163e+04  4.675e+03  13.184  < 2e-16 ***
## view1          1.045e+05  8.631e+03  12.106  < 2e-16 ***
## condition2     2.692e+04  5.593e+04   0.481    0.630    
## condition3     4.570e+04  5.475e+04   0.835    0.404    
## condition4     5.354e+04  5.475e+04   0.978    0.328    
## condition5     8.487e+04  5.481e+04   1.548    0.122    
## grade          7.457e+04  1.430e+03  52.133  < 2e-16 ***
## sqft_above     2.168e+01  2.962e+00   7.320 2.57e-13 ***
## yr_built      -1.777e+03  4.558e+01 -38.985  < 2e-16 ***
## yr_renovated   1.251e+01  2.528e+00   4.949 7.51e-07 ***
## sqft_living15  2.400e+01  2.427e+00   9.887  < 2e-16 ***
## sqft_lot15    -6.373e-01  1.516e-01  -4.203 2.64e-05 ***
## group2        -1.357e+05  2.934e+03 -46.265  < 2e-16 ***
## group3        -2.245e+05  3.137e+03 -71.539  < 2e-16 ***
## group4        -2.165e+05  3.111e+03 -69.594  < 2e-16 ***
## group5        -3.165e+05  3.342e+03 -94.710  < 2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 122200 on 19937 degrees of freedom
## Multiple R-squared:  0.7598,	Adjusted R-squared:  0.7595 
## F-statistic:  2628 on 24 and 19937 DF,  p-value: < 2.2e-16
```

#extracting the standardized fitted value and standardized residuals


```r
stdresid<-rstandard(fit)
stdfit<-predict(fit)%>%scale(scale = T)

diagnostics<-data.frame(stdresid,stdfit,`residual outlier`=abs(stdresid)>=3)

diagnostics%>%ggplot(aes(stdfit,stdresid))+geom_point()+geom_smooth()+
        geom_vline(xintercept = 0,lty="dashed",color="red",lwd=1)+
        geom_hline(yintercept = 0,lty="dashed",color="red",lwd=1)+
        xlab("Standardized fitted values")+
        ylab("Standardized Residuals")+
        ggtitle("Diagnostic plot to test homogeniety , homoscedasticity and linearity ")
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-25](figure/unnamed-chunk-25-1.png)

#wesee here that we have some degree of heteroscedasticity and nonlinearity

#checking the normality 


```r
qqPlot(fit)
```

![plot of chunk unnamed-chunk-26](figure/unnamed-chunk-26-1.png)

```
## [1]  5718 18794
```

#ok , the qqplot shows that the data has a degree of skewness 

#and to prove it lets see histogram


```r
hist(stdresid)
```

![plot of chunk unnamed-chunk-27](figure/unnamed-chunk-27-1.png)

#some right skew but the data still good 

#the only issue we have to handle is linearity and heteroscedasticity 

#now i will check partial residual to know the problematic variable


```r
resid<-resid(fit)
term<-predict(fit,houses,type = "terms")%>%data.frame()

partial.resid<-resid+term
houses.org<-houses
names(houses.org)<-paste("org",names(houses),sep = ".")
names(partial.resid)<-paste("part",names(partial.resid),sep = ".")
names(term)<-paste("term",names(term),sep = ".")
allpartial<-cbind(houses.org[,-1],partial.resid,term)


allpartial%>%ggplot(aes(org.sqft_living,part.sqft_living))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.sqft_living,y=term.sqft_living),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-1.png)

```r
allpartial%>%ggplot(aes(org.sqft_lot,part.sqft_lot))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.sqft_lot,y=term.sqft_lot),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-2.png)

```r
allpartial%>%ggplot(aes(org.sqft_above,part.sqft_above))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.sqft_above,y=term.sqft_above),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-3.png)

```r
allpartial%>%ggplot(aes(org.sqft_living15,part.sqft_living15))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.sqft_living15,y=term.sqft_living15),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-4.png)

```r
allpartial%>%ggplot(aes(org.sqft_lot15,part.sqft_lot15))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.sqft_lot15,y=term.sqft_lot15),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-5.png)

```r
allpartial%>%ggplot(aes(org.yr_built,part.yr_built))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.yr_built,y=term.yr_built),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-6.png)

```r
allpartial%>%ggplot(aes(org.yr_renovated,part.yr_renovated))+
        geom_point()+
        geom_smooth()+
        geom_line(aes(x = org.yr_renovated,y=term.yr_renovated),color="red",lwd=1)
```

```
## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
```

![plot of chunk unnamed-chunk-28](figure/unnamed-chunk-28-7.png)

#here we can find that the most problems associated with square foot of lot and the same variable in 2015 and the year of reonivation 

#i will catogrize the renovation variable into 4 categories Not renovated - 1900-1940 , 1941-1980 , 1981-2015


```r
houses$yr_renovated%>%table()
```

```
## .
##     0  1940  1944  1945  1946  1948  1950  1951  1953  1954  1955  1956 
## 19279     2     1     3     2     1     2     1     3     1     3     1 
##  1957  1958  1959  1960  1962  1963  1964  1965  1967  1968  1969  1970 
##     3     5     1     3     1     3     5     3     2     6     3     8 
##  1971  1972  1973  1974  1975  1976  1977  1978  1979  1980  1981  1982 
##     2     2     5     3     6     2     7     4     7     9     3     7 
##  1983  1984  1985  1986  1987  1988  1989  1990  1991  1992  1993  1994 
##    14    15    11     8    12    12    17    20    13    12    15    13 
##  1995  1996  1997  1998  1999  2000  2001  2002  2003  2004  2005  2006 
##    13     9    11    12     9    21    15    12    25    20    27    18 
##  2007  2008  2009  2010  2011  2012  2013  2014  2015 
##    27     8    19    15    12    11    28    79    10
```

#removing the zeros and specify the cumulative sum of the number of houses renovated 


```r
catig<-function(percent){
        
        ifelse(percent<.5,1,ifelse(percent>=.5&percent<.75,2,3))
}

catigor<-houses%>%filter(yr_renovated!=0)%>%
        group_by(yr_renovated)%>%summarize(cnt=n())%>%mutate(cumcnt=cumsum(cnt),
                                        percent=cumcnt/sum(houses$yr_renovated>0))



catigor<-catigor%>%mutate(renovC=catig(percent = percent))%>%select(yr_renovated,renovC)


houses<-(houses)%>%full_join(catigor)
```

```
## Joining, by = "yr_renovated"
```

```r
houses$renovC<-houses$renovC%>%replace_na(0)%>%factor()

houses<-houses%>%select(-yr_renovated)

table(houses$renovC)
```

```
## 
##     0     1     2     3 
## 19279   336   173   174
```

#recalculating the fit


```r
fit<-houses%>%with(lm(price~.,data=houses))
summary(fit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -518469  -78618   -3815   68806  932988 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    3.265e+06  1.011e+05  32.301  < 2e-16 ***
## bedrooms      -2.001e+04  1.334e+03 -15.004  < 2e-16 ***
## bathrooms      2.397e+04  2.236e+03  10.719  < 2e-16 ***
## sqft_living    1.055e+02  3.127e+00  33.736  < 2e-16 ***
## sqft_lot       5.627e-01  1.238e-01   4.546 5.49e-06 ***
## floors         1.211e+04  2.381e+03   5.087 3.67e-07 ***
## waterfront1    5.317e+05  3.529e+04  15.065  < 2e-16 ***
## view3          1.210e+05  7.198e+03  16.806  < 2e-16 ***
## view4          3.533e+05  1.573e+04  22.460  < 2e-16 ***
## view2          6.221e+04  4.672e+03  13.316  < 2e-16 ***
## view1          1.045e+05  8.624e+03  12.119  < 2e-16 ***
## condition2     2.796e+04  5.588e+04   0.500    0.617    
## condition3     4.628e+04  5.471e+04   0.846    0.398    
## condition4     5.474e+04  5.471e+04   1.001    0.317    
## condition5     8.619e+04  5.477e+04   1.574    0.116    
## grade          7.420e+04  1.431e+03  51.857  < 2e-16 ***
## sqft_above     2.219e+01  2.961e+00   7.493 7.00e-14 ***
## yr_built      -1.776e+03  4.556e+01 -38.978  < 2e-16 ***
## sqft_living15  2.441e+01  2.426e+00  10.061  < 2e-16 ***
## sqft_lot15    -6.409e-01  1.515e-01  -4.230 2.34e-05 ***
## group2        -1.354e+05  2.932e+03 -46.163  < 2e-16 ***
## group3        -2.242e+05  3.136e+03 -71.501  < 2e-16 ***
## group4        -2.161e+05  3.110e+03 -69.501  < 2e-16 ***
## group5        -3.164e+05  3.340e+03 -94.733  < 2e-16 ***
## renovC1       -3.496e+03  6.920e+03  -0.505    0.613    
## renovC2        5.357e+04  9.535e+03   5.618 1.96e-08 ***
## renovC3        5.146e+04  9.473e+03   5.432 5.63e-08 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 122100 on 19935 degrees of freedom
## Multiple R-squared:  0.7602,	Adjusted R-squared:  0.7599 
## F-statistic:  2431 on 26 and 19935 DF,  p-value: < 2.2e-16
```

#we can see here that renovation in first 80 years has no effect on the price but after that has 

#now lets try the weighted regression and start with calculating the wheights


```r
residl<-rstandard(fit)%>%abs()
fited<-fitted(fit)
residfit<-lm(residl~fited)
fittresid<-fitted(residfit)
wts<-1/fittresid^2

wtsfit<-houses%>%with(lm(price~.,data=houses,weights = wts))
summary(wtsfit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = houses, weights = wts)
## 
## Weighted Residuals:
##     Min      1Q  Median      3Q     Max 
## -492773 -108857   -8970   93926 1603026 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    2.786e+06  8.256e+04  33.742  < 2e-16 ***
## bedrooms      -1.947e+04  1.163e+03 -16.741  < 2e-16 ***
## bathrooms      1.682e+04  1.984e+03   8.479  < 2e-16 ***
## sqft_living    9.757e+01  2.978e+00  32.766  < 2e-16 ***
## sqft_lot       7.142e-01  1.075e-01   6.644 3.14e-11 ***
## floors         1.747e+04  2.135e+03   8.184 2.91e-16 ***
## waterfront1    5.589e+05  7.393e+04   7.560 4.21e-14 ***
## view3          1.079e+05  8.485e+03  12.719  < 2e-16 ***
## view4          3.580e+05  2.552e+04  14.025  < 2e-16 ***
## view2          5.999e+04  4.950e+03  12.120  < 2e-16 ***
## view1          9.628e+04  9.294e+03  10.359  < 2e-16 ***
## condition2     4.853e+04  3.048e+04   1.592 0.111346    
## condition3     8.680e+04  2.964e+04   2.929 0.003403 ** 
## condition4     9.184e+04  2.964e+04   3.098 0.001951 ** 
## condition5     1.177e+05  2.975e+04   3.955 7.67e-05 ***
## grade          5.812e+04  1.252e+03  46.423  < 2e-16 ***
## sqft_above     1.428e+01  2.828e+00   5.048 4.51e-07 ***
## yr_built      -1.493e+03  4.134e+01 -36.125  < 2e-16 ***
## sqft_living15  3.390e+01  2.269e+00  14.941  < 2e-16 ***
## sqft_lot15    -4.471e-01  1.264e-01  -3.538 0.000405 ***
## group2        -1.193e+05  3.249e+03 -36.707  < 2e-16 ***
## group3        -2.134e+05  3.252e+03 -65.617  < 2e-16 ***
## group4        -2.006e+05  3.265e+03 -61.449  < 2e-16 ***
## group5        -2.880e+05  3.299e+03 -87.280  < 2e-16 ***
## renovC1       -1.055e+04  6.237e+03  -1.692 0.090605 .  
## renovC2        4.581e+04  9.968e+03   4.596 4.33e-06 ***
## renovC3        5.524e+04  9.025e+03   6.121 9.45e-10 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 153500 on 19935 degrees of freedom
## Multiple R-squared:  0.7169,	Adjusted R-squared:  0.7165 
## F-statistic:  1941 on 26 and 19935 DF,  p-value: < 2.2e-16
```

```r
par(mfrow=c(1,1))
plot(wtsfitted,wtsstdresid)
```

```
## Error in plot(wtsfitted, wtsstdresid): object 'wtsfitted' not found
```

```r
par(mfrow=c(2,2))
plot(wtsfit)
```

![plot of chunk unnamed-chunk-32](figure/unnamed-chunk-32-1.png)

#we see here an improve in the linearity and heteroscedasticity

#comparing the coeficients of OLS model and weighted model


```r
data.frame(cbind(lm.beta(fit)$coefficients,lm.beta(wtsfit)$coefficients))
```

```
##                          X1            X2
## (Intercept)    3.264504e+06  2.785878e+06
## bedrooms      -2.000774e+04 -1.946637e+04
## bathrooms      2.396511e+04  1.682318e+04
## sqft_living    1.054769e+02  9.756508e+01
## sqft_lot       5.627206e-01  7.141791e-01
## floors         1.211214e+04  1.746942e+04
## waterfront1    5.316862e+05  5.588956e+05
## view3          1.209759e+05  1.079214e+05
## view4          3.532714e+05  3.579521e+05
## view2          6.220731e+04  5.999229e+04
## view1          1.045171e+05  9.627637e+04
## condition2     2.796053e+04  4.853306e+04
## condition3     4.627850e+04  8.680458e+04
## condition4     5.473613e+04  9.183739e+04
## condition5     8.618665e+04  1.176507e+05
## grade          7.420396e+04  5.812338e+04
## sqft_above     2.218712e+01  1.427658e+01
## yr_built      -1.775685e+03 -1.493229e+03
## sqft_living15  2.441215e+01  3.389723e+01
## sqft_lot15    -6.409397e-01 -4.471320e-01
## group2        -1.353636e+05 -1.192746e+05
## group3        -2.241918e+05 -2.134159e+05
## group4        -2.161340e+05 -2.006198e+05
## group5        -3.163788e+05 -2.879578e+05
## renovC1       -3.495662e+03 -1.055427e+04
## renovC2        5.356992e+04  4.581467e+04
## renovC3        5.146064e+04  5.524347e+04
```

#After seeing what we can do to improve our model , lets run the predictive mode using caret


```r
houses<-cbind(houses,wts)
trainidx<-createDataPartition(y = houses$price,p = .75,list = F)
traindata<-houses[trainidx,]
testdata<-houses[-trainidx,]
```

#running the model


```r
trainfit<-traindata%>%with(lm(price~.,data = traindata[,-length(names(traindata))],weights = traindata$wts))
summary(trainfit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = traindata[, -length(names(traindata))], 
##     weights = traindata$wts)
## 
## Weighted Residuals:
##     Min      1Q  Median      3Q     Max 
## -491468 -108706   -9360   93547 1592148 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    2.784e+06  9.881e+04  28.173  < 2e-16 ***
## bedrooms      -1.942e+04  1.350e+03 -14.383  < 2e-16 ***
## bathrooms      1.589e+04  2.295e+03   6.923 4.60e-12 ***
## sqft_living    9.682e+01  3.424e+00  28.278  < 2e-16 ***
## sqft_lot       7.393e-01  1.244e-01   5.941 2.90e-09 ***
## floors         1.643e+04  2.490e+03   6.599 4.28e-11 ***
## waterfront1    5.663e+05  8.169e+04   6.932 4.31e-12 ***
## view3          1.044e+05  1.007e+04  10.370  < 2e-16 ***
## view4          3.671e+05  2.840e+04  12.924  < 2e-16 ***
## view2          5.961e+04  5.717e+03  10.427  < 2e-16 ***
## view1          9.741e+04  1.150e+04   8.467  < 2e-16 ***
## condition2     4.328e+04  4.319e+04   1.002 0.316358    
## condition3     8.213e+04  4.248e+04   1.933 0.053203 .  
## condition4     8.600e+04  4.248e+04   2.024 0.042957 *  
## condition5     1.125e+05  4.258e+04   2.643 0.008232 ** 
## grade          5.862e+04  1.447e+03  40.521  < 2e-16 ***
## sqft_above     1.464e+01  3.271e+00   4.476 7.65e-06 ***
## yr_built      -1.490e+03  4.788e+01 -31.126  < 2e-16 ***
## sqft_living15  3.441e+01  2.627e+00  13.098  < 2e-16 ***
## sqft_lot15    -5.296e-01  1.460e-01  -3.628 0.000287 ***
## group2        -1.184e+05  3.761e+03 -31.484  < 2e-16 ***
## group3        -2.117e+05  3.761e+03 -56.298  < 2e-16 ***
## group4        -2.002e+05  3.774e+03 -53.030  < 2e-16 ***
## group5        -2.854e+05  3.824e+03 -74.636  < 2e-16 ***
## renovC1       -1.117e+04  7.124e+03  -1.568 0.116966    
## renovC2        5.384e+04  1.155e+04   4.660 3.19e-06 ***
## renovC3        6.042e+04  1.029e+04   5.874 4.34e-09 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 153600 on 14946 degrees of freedom
## Multiple R-squared:  0.7168,	Adjusted R-squared:  0.7163 
## F-statistic:  1455 on 26 and 14946 DF,  p-value: < 2.2e-16
```

```r
predicted<-predict(trainfit,testdata)

RMSE(pred = predicted,obs = testdata$price)
```

```
## [1] 123667.5
```

#trying removing non significant coefs


```r
traindata<-traindata%>%select(-c(condition))

trainfit<-traindata%>%with(lm(price~.,data = traindata[,-length(names(traindata))],weights = traindata$wts))
summary(trainfit)
```

```
## 
## Call:
## lm(formula = price ~ ., data = traindata[, -length(names(traindata))], 
##     weights = traindata$wts)
## 
## Weighted Residuals:
##     Min      1Q  Median      3Q     Max 
## -490415 -108623   -9962   94046 1604347 
## 
## Coefficients:
##                 Estimate Std. Error t value Pr(>|t|)    
## (Intercept)    3.004e+06  8.734e+04  34.389  < 2e-16 ***
## bedrooms      -1.893e+04  1.352e+03 -13.999  < 2e-16 ***
## bathrooms      1.757e+04  2.294e+03   7.661 1.96e-14 ***
## sqft_living    9.814e+01  3.433e+00  28.590  < 2e-16 ***
## sqft_lot       7.130e-01  1.248e-01   5.712 1.14e-08 ***
## floors         1.525e+04  2.482e+03   6.146 8.17e-10 ***
## waterfront1    5.659e+05  8.196e+04   6.905 5.22e-12 ***
## view3          1.041e+05  1.010e+04  10.307  < 2e-16 ***
## view4          3.692e+05  2.850e+04  12.955  < 2e-16 ***
## view2          5.972e+04  5.736e+03  10.412  < 2e-16 ***
## view1          9.837e+04  1.154e+04   8.522  < 2e-16 ***
## grade          5.882e+04  1.450e+03  40.553  < 2e-16 ***
## sqft_above     1.359e+01  3.280e+00   4.143 3.44e-05 ***
## yr_built      -1.560e+03  4.665e+01 -33.439  < 2e-16 ***
## sqft_living15  3.298e+01  2.631e+00  12.533  < 2e-16 ***
## sqft_lot15    -4.993e-01  1.462e-01  -3.414 0.000641 ***
## group2        -1.183e+05  3.774e+03 -31.347  < 2e-16 ***
## group3        -2.130e+05  3.769e+03 -56.516  < 2e-16 ***
## group4        -2.012e+05  3.784e+03 -53.160  < 2e-16 ***
## group5        -2.858e+05  3.836e+03 -74.522  < 2e-16 ***
## renovC1       -1.349e+04  7.130e+03  -1.893 0.058434 .  
## renovC2        4.869e+04  1.155e+04   4.215 2.51e-05 ***
## renovC3        5.538e+04  1.027e+04   5.391 7.13e-08 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 154100 on 14950 degrees of freedom
## Multiple R-squared:  0.7149,	Adjusted R-squared:  0.7144 
## F-statistic:  1704 on 22 and 14950 DF,  p-value: < 2.2e-16
```

```r
predicted<-predict(trainfit,testdata)

RMSE(pred = predicted,obs = testdata$price)
```

```
## [1] 124192
```

